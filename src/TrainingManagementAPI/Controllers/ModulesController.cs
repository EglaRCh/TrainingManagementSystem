using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TrainingManagementAPI.Data;
using TrainingManagementAPI.DTOs;
using TrainingManagementAPI.Models;

namespace TrainingManagementAPI.Controllers
{
    // üß≠ [ApiController]: indica que este archivo define un controlador de API REST.
    // ASP.NET Core aplicar√° validaciones autom√°ticas de modelo y formato JSON.
    [ApiController]

    // üìå [Route]: define la URL base para este controlador.
    // "api/modules" ser√° la direcci√≥n base de los endpoints.
    [Route("api/[controller]")]
    public class ModulesController : ControllerBase
    {
        // üîπ Dependencia del contexto de base de datos (AppDbContext).
        // Permite acceder a las tablas definidas en EF Core (Modules, Goals, etc.)
        private readonly AppDbContext _db;

        // üì¶ Constructor: inyecta el contexto de base de datos cuando se crea el controlador.
        public ModulesController(AppDbContext db)
        {
            _db = db;
        }

        // =====================================================================
        // 1Ô∏è‚É£ [GET] api/modules
        // Este m√©todo obtiene todos los m√≥dulos o los filtra por GoalId.
        // =====================================================================
        [HttpGet]
        public async Task<ActionResult<IEnumerable<ModuleReadDto>>> GetAll(
            [FromQuery] int? goalId,     // filtro opcional por objetivo
            [FromQuery] int page = 1,    // n√∫mero de p√°gina
            [FromQuery] int pageSize = 20, // tama√±o de p√°gina
            CancellationToken ct = default)
        {
            // üß© Validaciones simples de paginaci√≥n
            page = Math.Clamp(page, 1, 10000);
            pageSize = Math.Clamp(pageSize, 1, 100);

            // üîé AsNoTracking(): indica a EF Core que no rastree los resultados
            // (mejor rendimiento para lecturas, no se modifican).
            var query = _db.Modules.AsNoTracking().AsQueryable();

            // üéØ Si se pas√≥ un GoalId, filtra los m√≥dulos de ese objetivo
            if (goalId.HasValue)
                query = query.Where(m => m.GoalId == goalId.Value);

            // üìä Ordena por fecha de creaci√≥n (los m√°s recientes primero)
            var items = await query
                .OrderByDescending(m => m.CreatedAt)
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                // ü™Ñ Proyecta a DTO (solo campos que queremos exponer)
                .Select(m => new ModuleReadDto(
                    m.Id,
                    m.GoalId,
                    m.Type,
                    m.DurationWeeks,
                    m.SessionsPerWeek,
                    m.Notes,
                    m.CreatedAt
                ))
                .ToListAsync(ct);

            // üßæ Devuelve 200 OK con la lista
            return Ok(items);
        }

        // =====================================================================
        // 2Ô∏è‚É£ [GET] api/modules/{id}
        // Obtiene un solo m√≥dulo por su Id.
        // =====================================================================
        [HttpGet("{id:int}")]
        public async Task<ActionResult<ModuleReadDto>> GetById(int id, CancellationToken ct)
        {
            // üîç Busca el m√≥dulo correspondiente
            var m = await _db.Modules.AsNoTracking()
                        .FirstOrDefaultAsync(x => x.Id == id, ct);

            // ‚ùå Si no existe, devuelve 404 Not Found
            if (m is null) return NotFound();

            // ‚úÖ Si existe, transforma a DTO y devuelve 200 OK
            var dto = new ModuleReadDto(
                m.Id, m.GoalId, m.Type, m.DurationWeeks,
                m.SessionsPerWeek, m.Notes, m.CreatedAt
            );

            return Ok(dto);
        }

        // =====================================================================
        // 3Ô∏è‚É£ [POST] api/modules
        // Crea un nuevo m√≥dulo de entrenamiento.
        // =====================================================================
        [HttpPost]
        public async Task<ActionResult<ModuleReadDto>> Create(
            [FromBody] ModuleCreateDto dto,  // üëà Se usa DTO con Data Annotations
            CancellationToken ct)
        {
            // ‚öôÔ∏è Validaciones de dominio adicionales
            // Aunque Data Annotations ya hace lo b√°sico, agregamos reglas l√≥gicas:
            if (dto.DurationWeeks < 1 || dto.SessionsPerWeek < 1)
                return BadRequest("La Duraci√≥n Semanal y Sesiones Semanales deben ser => 1.");

            // Verifica que el GoalId exista (evita error de FK en la BD)
            var goalExists = await _db.Goals.AnyAsync(g => g.Id == dto.GoalId, ct);
            if (!goalExists)
                return BadRequest($"El Objetivo con el ID {dto.GoalId} no existe.");

            // üß± Crea la entidad desde el DTO
            var entity = new Module
            {
                GoalId = dto.GoalId,
                Type = dto.Type.Trim(),
                DurationWeeks = dto.DurationWeeks,
                SessionsPerWeek = dto.SessionsPerWeek,
                Notes = dto.Notes,
                CreatedAt = DateTime.UtcNow
            };

            // üß© Agrega a la base de datos
            _db.Modules.Add(entity);
            await _db.SaveChangesAsync(ct);

            // üîÅ Convierte la entidad a DTO de lectura
            var readDto = new ModuleReadDto(
                entity.Id, entity.GoalId, entity.Type,
                entity.DurationWeeks, entity.SessionsPerWeek,
                entity.Notes, entity.CreatedAt
            );

            // üì§ Devuelve 201 Created con ubicaci√≥n y datos
            return CreatedAtAction(nameof(GetById), new { id = entity.Id }, readDto);
        }

        // =====================================================================
        // 4Ô∏è‚É£ [PUT] api/modules/{id}
        // Actualiza parcialmente los datos de un m√≥dulo.
        // =====================================================================
        [HttpPut("{id:int}")]
        public async Task<IActionResult> Update(
            int id,
            [FromBody] ModuleUpdateDto dto, // DTO de actualizaci√≥n
            CancellationToken ct)
        {
            // Busca el m√≥dulo
            var entity = await _db.Modules.FirstOrDefaultAsync(m => m.Id == id, ct);
            if (entity is null) return NotFound();

            // ‚öôÔ∏è Validaciones l√≥gicas
            if (string.IsNullOrWhiteSpace(dto.Type))
                return BadRequest("Type is required.");
            if (dto.DurationWeeks < 1 || dto.SessionsPerWeek < 1)
                return BadRequest("La Duraci√≥n Semanal y Sesioes por semana debe ser => a 1.");

            // üîÑ Actualiza solo campos permitidos (no se puede cambiar GoalId, CreatedAt)
            entity.Type = dto.Type.Trim();
            entity.DurationWeeks = dto.DurationWeeks;
            entity.SessionsPerWeek = dto.SessionsPerWeek;
            entity.Notes = dto.Notes;

            await _db.SaveChangesAsync(ct);

            // ‚úÖ No hay contenido que devolver (convenci√≥n REST)
            return NoContent();
        }

        // =====================================================================
        // 5Ô∏è‚É£ [DELETE] api/modules/{id}
        // Elimina un m√≥dulo por su Id.
        // =====================================================================
        [HttpDelete("{id:int}")]
        public async Task<IActionResult> Delete(int id, CancellationToken ct)
        {
            var entity = await _db.Modules.FindAsync([id], ct);
            if (entity is null) return NotFound();

            _db.Modules.Remove(entity);
            await _db.SaveChangesAsync(ct);

            // ‚úÖ 204 No Content = eliminado con √©xito
            return NoContent();
        }
    }
}
